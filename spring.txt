서버단 작성
1) spring framework : 웹 개발할 때 주로 사용 / 설정 작업 많이필요
2) spring boot : spring framework 간편화 버전


프로젝트 생성
1. 빌드 툴 설정
build : 프로젝트 생성, 라이브러리 설정, 코드작업, 컴파일, 테스트, 패키지작성, 배포
    1) gradle : text 기반, 후발주자(maven 개선)
    2) maven : xml 기반

2. spring boot version 선택 : 3.4.4
3. 언어선택 (java)
4. 패키지명 : com.example.demo (자유지정가능)
5. 패키징타입 : jar(java 압축파일), war(자바 웹 압축파일-jsp)
6. 자바버전선택 : 부트버전에 따라 선택이 달라질 수 있음
7. 필요 라이브러리 선택 : Spring Web, dev tools, thymeleaf, lombok, spring data jpa, oracle driver, validation
                          따로추가 thymeleaf dialect

화면(front)단 작성 : html + css + javascript + java
1) jsp 활용하여 java표현 : *.jsp
    html 코드 + java 코드 동시 작성가능
    jsp를 spring boot 에서 사용하기 위해서는 따로 설정 작업이 필요

2) 템플릿 엔진 활용 : *.html
    thymeleaf, mustache, groovy, freemaker, velocity

스프링 주요 개념
1) IoC(Inversion of Control) : 메소드나 객체의 호출 작업을 개발자가 결정하는 것이 아니라 외부(스프링 컨테이너)에서 결정(제어의 역전)

    class A {}
    class B {
        A obj = new A();
    }
    위의 작업 필요없음

    단, 컨테이너는 어느 객체를 생성할 것인지 알아야 함 => 어노테이션으로 알려주기
    - 컨테이너가 생성한 객체 : bean (커피콩모양)
    - 싱글톤 방식(객체는 하나만 생성하는 방식)으로 객체 생성
    - @Controller, @Service, @Component

    Injection(주입)
        - @Controller, @Service, @Component 를 통해서 생성된 객체를 언제, 어디에 사용할 것인지 알려주는 개념
        - @Autowired 를 통해 필요한 객체 위에 작성(컨테이너가 관리하는 객체를 주입하는 개념)

        @Autowired (테스트클래스에서도 가능) 클래스에 @RequiredArgsConstructor 붙이기 (테스트클래스에서는 불가능) 
        private MemoService memoService; == private final MemoService memoService;


2) 경로 임의로 생성
    http://localhost:8080/ ==> Controller 파일의 메소드와 매핑

    uri 설계
    ex) 게시판 개발
    게시글 작성 : /board/create
    게시글 목록 : /board/list
    게시글 조회 : /board/read
    게시글 수정 : /board/update
    
    @RequestMapping("/board")
    public class BoardController {
    @GetMapping("/create")
    public String method() {
        return "info";
    }

    @GetMapping("/update")
    public void method() {}

    }

    http://localhost:8080/board/create 브라우저 요청 => 컨트롤러 응답 => templates 찾기(templates / return 값 찾기)
     => templates / info.html 작성
    
    http://localhost:8080/board/update 브라우저 요청 => 컨트롤러 응답 => templates 찾기(templates / board/update )
     => templates / board/update.html 작성


3) 내장 서버 : Tomcat(설치 후 사용 - 스프링부트를 사용한다면 내장되어 있음)

    http://localhost:8080/ : Tomcat 서버 구동 시 기본경로

    브라우저를 통해 http, https 프로토콜에 응답하는 서버 : SW 웹서버 (Apache, NginX)
    WAS(Web Application Server) : 웹 서버 + 자바해석 => Tomcat

4) 오류발생
    status 코드
    200 : ok
    400 : Parameter 값을 받아올 때 Null이거나 Type이 맞지 않는 경우 발생하는 에러
    404 : Not Found (컨트롤러 경로 확인 대소문자 구분함)
    405 : 컨트롤러 경로 + 매핑방식 확인
    500 : 서버에러

5) 사용자 입력값 가져오기

    1. 변수 이용 : 타입 지정 가능, 변수명은 form 요소의 이름과 일치시키는것이 편함  th:text="${result}" th:value="${}"
                   기본적으로는 template페이지로 입력값이 유지되지않기에 model 객체를 이용해서 각각의 변수를 화면단으로 넘겨야 함

    2. 커맨드(DTO) 객체 이용 : 객체 생성 시 타입 지정 가능, 변수명은 form 요소의 이름과 일치시키는것이 편함
                               커맨드 객체 사용 시 장점은 template 페이지까지 입력값이 유지됨  [[${loginDTO?.userid}]]

    3. HttpServletRequest 이용 (코드가 길어져 잘 사용하지 않음)
    
6) @ModelAttribute
    - 별칭의 용도
    - model.addAttribute("num1", num1) == @ModelAttribute("num1") : template 페이지에서 값을 유지하고 싶을때 사용
    
7) RedirectAttributes : 컨트롤러에서 움직이는 방식이 redirect 일 때 사용가능 / 움직이면서 특정 값을 가지고 가고 싶을 때 사용

    - rttr.addAttribute("userid", "10"); -> 주소뒤에 ?userid=10  => 템플릿 ${param.userid}
    - rttr.addFlashAttribute("password", "12"); session 객체에 담는것과 같은 방식 => 템플릿 ${password}

    컨트롤러에서는 마지막에 templates를 찾거나 redirect(다른주소경로)를 수행한다 두가지 행동 중 하나를 수행함

8) 데이터 유지하기
    - login.html에서 입력한 값을 ==> 컨트롤러를 거쳐 ==> logout.html 까지 입력값을 유지하고 싶다면
        - forward 방식 : @ModelAttribute, Model, 커맨드 객체 (DTO)
        - redirect 방식 : RedirectAttributes 이용
    - login.html에서 입력한 값을 ==> 컨트롤러를 거쳐 ==> 모든페이지에서 입력값을 유지하고 싶다면
        - 세션(session) : 값을 서버쪽에 저장하는 개념(객체 형태로 담는 것이 가능하다)
                HttpSession 을 이용해 저장 => 필요없는 경우 제거 or 현재 세션이 유지되고 있는 브라우저를 닫으면 종료
        - 쿠키 : 값을 클라이언트 브라우저로 전송 후 저장
    - login.html에서 입력한 값을 ==> 컨트롤러를 거쳐 ==> 다른페이지에서 입력값을 소멸시키고 싶다면
        - 컨트롤러에서 변수로 받아오는 경우 입력값 무조건 소멸됨

경로 설정

http://localhost:8080/ 고정

href 경로 설정 시 현재경로(주소줄에 있는 경로)

현재경로 : http://localhost:8080/sample
움직일 경로 : http://localhost:8080/ex1

th:href="@{ex1(id=${dto.id})}" : /를 안붙이면 현재경로에서 맨 마지막 경로 대체 주소 설정함
th:href="@{/ex1(id=${dto.id})}" : /를 붙이면 http://localhost:8080/ 다음 부터 경로 설정함

데이터베이스 작업 => 프레임워크
1. MyBatis
2. JPA : 객체 == 테이블
    - JPA 기술을 구현한 Hibernate 구현체가 존재

    데이터베이스 초기화 전략
    spring.jpa.hibernate.ddl-auto=  (=뒤에 5가지 종류가 올수있음)
    1) create : 기존 테이블 삭제 후 테이블 생성(개발시)
    2) create-drop : 기존 테이블 삭제 후 테이블 생성, 종료 시점에 테이블 삭제(개발시)
    3) update : 변경된 부분만 적용(개발시)
    4) validate : 엔티티와 테이블 정상 매핑 확인(스테이징, 운영환경)
    5) none : 사용하지 않음(스테이징, 운영환경)

    Entity 명이 테이블명으로 사용됨 (기본)
    @Table(name = "테이블명") : Entity 명이 아닌 지정된 이름으로 테이블 생성

    ------------------------------------------------------------------------------------------------------------
    오라클인 경우

    create sequence studenttbl_seq start with 1 increment by 50
    해당 구문들은 시퀀스가 50씩 증가
    @GeneratedValue 
    @GeneratedValue(strategy = GenerationType.AUTO)

    ------------------------------------------------------------------------------------------------------------

    @GeneratedValue(strategy = GenerationType.IDENTITY)
        - id number(19,0) generated by default as identity,

    @SequenceGenerator(name = "student_seq_gen", sequenceName = "student_seq", allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "student_seq_gen")
    
--------------------------------------------------------------------------------------

    날짜 어노테이션

    org.hibernate 에서 제공하는
    @CreationTimestamp : 데이터 삽입 시 자동으로 현재 시스템 날짜 시간 삽입
    @UpdateTimestamp : 데이터 삽입 + 수정시 자동으로 현재 시스템 날짜 시간 삽입

    org.springframework.data 제공하는
    @CreatedDate
    @LastModifiedDate
    + hibernate에서 제공하는 기능과 같은 기능이지만 추가적인 설정작업이 필요함
    main이 있는 클래스에 @EnableJpaAuditing 추가,
    Entity 클래스에 @EntityListeners(value = AuditingEntityListener.class) 추가
    자바의 상속을 이용하기위해서는 해당방법을 사용해야함

--------------------------------------------------------------------------------------

Repository + Entity

Repository 제공 메소드
1) save() : insert, update
2) findById() : select(where절 포함)
3) findAll() : 전체조회
4) deleteById() / delete() : 삭제